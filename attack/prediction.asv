function [ output_args ] = prediction(AnfisData)
%PREDICTION Summary of this function goes here
%   Detailed explanation goes here
% Prediction
Data = evalfis(time_vector,out_fis);
% Importing Test data [NSL_KDD Test Dataset]
filePath = 'NSL_KDD-master/KDDTest+.csv';
[Duration_of_Conn,Protocol_Type,Service,Flag,Source_Bytes...
    ,Dest_Bytes,Failed_Login,Status] = importfile(filePath);

time = nonzeros(S_TCP_Time(:));
sce = S_TCP_Source(~cellfun('isempty',S_TCP_Source(:)));
source = sce(:);
pr = S_TCP_Protocol(~cellfun('isempty',S_TCP_Destination));
protocol = pr(:);
lth = nonzeros(S_TCP_Length(:));
length = lth(:);

tcptime = time(1:T); % Converting from column to row vector\
tcpsource = source(1:T);
tcpdestination = S_TCP_Destination(1:T);
tcpprotocol = protocol(1:T);

for p = 1:length(tcptime)
    flood(p) = 1 + (3-1).*rand();
end
tcplength = length(1:T) .* flood';

Stat_traffic = AnfisData; % N(t)


% y(t) = N(t) - a(t), where a(t) is the attack traffic
for k = 1:length(tcplength)
    Y_t(k) = tcplength(k);
    a_t(k) = Y_t(k) - Stat_traffic(k);
    A(k) = a_t(k)/Stat_traffic(k);
end

M = mean(A);
Std_A = std(A);
dof = T - 1; % degree of freedom
% Compute the confidence interval
disp('Now computing the confidence interval of ddos attack...')
ts = tinv([0.025  0.975],dof);
CI = M + ts* (Std_A/sqrt(T));
disp('CI Computed')
disp('----------------------------------------')
disp(['Sample Mean of A(t): ' num2str(M) ''])
disp('----------------------------------------')
disp(['Standard Deviation S(T): ' num2str(Std_A) ''])
disp('----------------------------------------')
disp(['Percentiles of the t-distribution: ' num2str(ts) ''])
disp('----------------------------------------')
disp(['Attack Confidence Interval: ' num2str(CI) ''])
disp('----------------------------------------')
if(CI(2) > 0 & Y_t(attack) > alarm_value)
    for attack = 1:T
		if(Y_t(attack) > alarm_value)
			attack_time(attack) = tcptime(attack);
			attack_val(attack) = tcplength(attack);
			attack_source(attack) = tcpsource(attack);
		end
    end
    Detected_Packet_Bytes_Length = attack_val(:);
    Time_of_Attack = attack_time(:);
    Source_of_Attack = attack_source(:);
    n = 1:1:length(Source_of_Attack);
    no = n';
    table(no,Detected_Packet_Bytes_Length, Time_of_Attack, Source_of_Attack)
else
    disp('No Attacks were detected')
end

end

